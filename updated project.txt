import os
print(os.path.exists("/content/dataset.zip"))



import zipfile
import os

zip_path = "/content/dataset.zip"
extract_path = "/content/extracted"

if not os.path.exists(extract_path):
    os.makedirs(extract_path)  # Ensure the directory exists

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

print("Files extracted to:", extract_path)


!pip install torch torchvision torchaudio
!pip install ultralytics

!git clone https://github.com/ultralytics/yolov5.git
%cd yolov5
!pip install -r requirements.txt
!pip uninstall -y wandb
!pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118

!echo -e "train: /content/extracted/train/images\nval: /content/extracted/valid/images\ntest: /content/extracted/test/images\n\nnc: 7\nnames: ['clean', 'partially_blocked', 'blocked', 'overflowing', 'dry', 'wet', 'unknown']" > /content/extracted/data.yaml
!pip install -U albumentations
import torch
print(torch.__version__)  # Check PyTorch version
print(torch.cuda.is_available())  # Should return True if GPU is available
print(torch.version.cuda)  # Check CUDA version used by PyTorch
!pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118

from google.colab import drive
drive.mount('/content/drive')
!echo -e "train: /content/extracted/train/images\nval: /content/extracted/valid/images\ntest: /content/extracted/test/images\n\nnc: 7\nnames: ['clean', 'partially_blocked', 'blocked', 'overflowing', 'dry', 'wet', 'unknown']" > /content/extracted/data.yaml


!python train.py --weights yolov5s.pt --data /content/extracted/data.yaml --epochs 50 --batch-size 16 --device 0 --project "/content/drive/MyDrive/YOLOv5_training" --name "my_model"

!python detect.py --weights /content/best.pt \
--img 640 --conf 0.1 --source /content/img.jpg

----------

#include "esp_camera.h"
#include <WiFi.h>
#include <HTTPClient.h>
#include <base64.h>

// Pin configuration (AI Thinker ESP32-CAM)
#define PWDN_GPIO_NUM     32
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM      0
#define SIOD_GPIO_NUM     26
#define SIOC_GPIO_NUM     27
#define Y9_GPIO_NUM       35
#define Y8_GPIO_NUM       34
#define Y7_GPIO_NUM       39
#define Y6_GPIO_NUM       36
#define Y5_GPIO_NUM       21
#define Y4_GPIO_NUM       19
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM        5
#define VSYNC_GPIO_NUM    25
#define HREF_GPIO_NUM     23
#define PCLK_GPIO_NUM     22

const char* ssid = "IOT2";              // Verify WiFi SSID
const char* password = "iot2it123";     // Verify WiFi password
const char* serverName = "https://script.google.com/macros/s/AKfycbz8yL1jY06sKUClSUnMEUJlGxtnzAatO1_MH-99XDVu29ERWVTobZp28OqUHUgMdaND/exec";

unsigned long previousImageTime = 0;
const unsigned long imageInterval = 10000; // 10 seconds for testing (revert to 600000 later)
unsigned long overflowStartTime = 0;        // Start time of overflow
const unsigned long overflowDuration = 600000; // 10 minutes for overflow persistence
bool overflowActive = false;                // Track if overflow is ongoing

void startCamera() {
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.frame_size = FRAMESIZE_SVGA; // 800x600 for memory efficiency
  config.pixel_format = PIXFORMAT_JPEG;
  config.grab_mode = CAMERA_GRAB_WHEN_EMPTY;
  config.fb_location = CAMERA_FB_IN_PSRAM;
  config.jpeg_quality = 15; // Lower quality to reduce size
  config.fb_count = 1;

  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("‚ùå Camera init failed with error 0x%x. Restarting...\n", err);
    delay(1000);
    ESP.restart();
    return;
  }
  Serial.println("‚úÖ Camera initialized successfully!");
}

void sendCapturedImage() {
  camera_fb_t * fb = esp_camera_fb_get();
  if (!fb) {
    Serial.println("‚ùå Camera capture failed");
    return;
  }
  Serial.print("üì∏ Image Captured! (Size: ");
  Serial.print(fb->len);
  Serial.println(" bytes)");
  if (fb->len > 100000) { // Limit to 100KB
    Serial.println("‚ùå Image too large, skipping upload!");
    esp_camera_fb_return(fb);
    return;
  }
  String base64Image = base64::encode(fb->buf, fb->len);
  esp_camera_fb_return(fb);

  HTTPClient http;
  http.begin(serverName);
  http.addHeader("Content-Type", "text/plain");
  int httpResponseCode = http.POST(base64Image);
  if (httpResponseCode > 0) {
    String response = http.getString();
    Serial.println("‚úÖ Image uploaded - HTTP Response code: " + String(httpResponseCode));
    Serial.println("‚úÖ Server response: " + response);
  } else {
    Serial.println("‚ùå Error in sending image: " + String(http.errorToString(httpResponseCode)));
  }
  http.end();
}

void sendOverflowMessage() {
  String message = "Overflow detected (continuous for 10 min)";
  String base64Message = base64::encode((uint8_t*)message.c_str(), message.length());

  HTTPClient http;
  http.begin(serverName);
  http.addHeader("Content-Type", "text/plain");
  int httpResponseCode = http.POST(base64Message);
  if (httpResponseCode > 0) {
    String response = http.getString();
    Serial.println("‚úÖ Overflow status stored in Drive - HTTP Response code: " + String(httpResponseCode));
    Serial.println("‚úÖ Server response: " + response);
  } else {
    Serial.println("‚ùå Error sending overflow status: " + String(http.errorToString(httpResponseCode)));
  }
  http.end();
}

void setup() {
  Serial.begin(115200);
  Serial.println("ESP32-CAM starting...");

  // Wi-Fi connection with timeout
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi...");
  unsigned long wifiStartTime = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - wifiStartTime < 20000) {
    delay(500);
    Serial.print(".");
  }
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("\n‚ùå WiFi connection failed! Restarting...");
    delay(1000);
    ESP.restart();
  }
  Serial.println("\n‚úÖ Connected to WiFi!");

  startCamera();
  previousImageTime = millis() - (imageInterval - 5000); // Trigger image soon for testing
}

void loop() {
  unsigned long currentTime = millis();

  // Image capture (non-blocking)
  if (currentTime - previousImageTime >= imageInterval) {
    Serial.println("‚è≥ Capturing and sending image...");
    sendCapturedImage();
    previousImageTime = currentTime;
  }

  // Check Serial for overflow messages
  while (Serial.available() > 0) {
    String command = Serial.readStringUntil('\n');
    command.trim();
    if (command == "Overflow") {
      if (!overflowActive) {
        overflowStartTime = currentTime; // Start timer on first Overflow
        overflowActive = true;
        Serial.println("Overflow started, monitoring for 10 minutes...");
      } else if (currentTime - overflowStartTime >= overflowDuration) {
        Serial.println("Overflow detected for 10 minutes, sending to Drive...");
        sendOverflowMessage();
        overflowActive = false; // Reset after sending
      }
    } else if (command == "Normal") {
      if (overflowActive) {
        Serial.println("Overflow interrupted by Normal, resetting...");
        overflowActive = false; // Reset if Normal received
      }
    }
    // Ignore other messages (e.g., Moisture: ...)
  }

  delay(10); // Fast Serial check
}

----------
#define MQ135_PIN A0
float Ro = 0.1270;  // Replace with calibrated value

void setup() {
  Serial.begin(9600);
  delay(1000);
  Serial.println("üå´Ô∏è MQ135 Gas Concentration Estimator");
}

float getRs(int adcValue) {
  float voltage = adcValue * (5.0 / 1023.0);
  return (5.0 - voltage) / voltage;
}

float getPPM(float ratio, float a, float b) {
  return a * pow(ratio, b);
}

void loop() {
  int adcValue = analogRead(MQ135_PIN);
  float Rs = getRs(adcValue);
  float ratio = Rs / Ro;

  Serial.print("üìä Raw ADC: ");
  Serial.print(adcValue);
  Serial.print(" | Rs/Ro: ");
  Serial.println(ratio);

  Serial.print("üü¢ CO‚ÇÇ (ppm): ");
  Serial.println(getPPM(ratio, 116.6020682, -2.769034857));

  Serial.print("üü° CO (ppm): ");
  Serial.println(getPPM(ratio, 605.18, -3.937));

  Serial.print("üîµ NH‚ÇÉ (ppm): ");
  Serial.println(getPPM(ratio, 102.2, -2.473));

  Serial.print("üü£ Alcohol (ppm): ");
  Serial.println(getPPM(ratio, 77.255, -3.18));

  Serial.print("üü† Toluene (ppm): ");
  Serial.println(getPPM(ratio, 44.947, -3.445));

  Serial.print("üî¥ Acetone (ppm): ");
  Serial.println(getPPM(ratio, 34.668, -3.369));

  Serial.println("---------------------------------------------------");
  delay(5000);  // Delay for readability
}
----------colab---------
!python detect.py --weights /content/best.pt \
--img 640 --conf 0.2 --source /content/img.jpg


# Install dependencies and clone YOLOv5 repository (only run once per session)
!pip install torch torchvision
!pip install opencv-python-headless
#ry libraries
from google.colab import drive
import os
import time
import shutil
from glob import glob
from IPython.display import display, Image
from datetime import datetime

# Mount Google Drive (skip if already mounted)
drive.mount('/content/drive')

# Define paths (modify these as needed)
FOLDER_PATH = '/content/drive/MyDrive/espimg'  # Folder where ESP32-CAM uploads images
MODEL_PATH = '/content/best.pt'  # Path to your trained YOLOv5 model
OUTPUT_DIR = '/content/drive/MyDrive/output'   # Directory to save detected images
OUTPUT_BASE = 'detected_output'                # Base name for output files

# Ensure the input folder and model exist
if not os.path.exists(FOLDER_PATH):
    print(f"‚ùå Error: Folder not found at {FOLDER_PATH}")
    raise SystemExit
if not os.path.exists(MODEL_PATH):
    print(f"‚ùå Error: Model not found at {MODEL_PATH}")
    raise SystemExit

def get_latest_image(folder_path):
    """Returns the path of the most recently modified image in the folder."""
    image_extensions = ('.jpg', '.jpeg', '.png')
    image_files = [os.path.join(folder_path, f) for f in os.listdir(folder_path)
                   if f.lower().endswith(image_extensions)]

    if not image_files:
        print("‚ö†Ô∏è No images found in the folder.")
        return None

    # Get the most recently modified image
    latest_file = max(image_files, key=os.path.getmtime)
    mod_time = time.ctime(os.path.getmtime(latest_file))
    print(f"üì∏ Latest image: {os.path.basename(latest_file)} (Modified: {mod_time})")
    return latest_file

def get_unique_output_path(output_dir, base_name, original_filename):
    """Generates a unique filename using the original name and a timestamp."""
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    original_base = os.path.splitext(os.path.basename(original_filename))[0]
    output_path = os.path.join(output_dir, f"{base_name}_{original_base}_{timestamp}.jpg")
    return output_path

def process_latest_image_with_yolov5():
    """Processes the latest image with YOLOv5 and displays the result with a unique filename."""
    latest_image = get_latest_image(FOLDER_PATH)

    if not latest_image:
        print("‚ùå No image to process. Exiting...")
        return

    print(f"üöÄ Running YOLOv5 on: {latest_image}")

    # Run YOLOv5 detection
    detect_command = (
        f"python detect.py --weights {MODEL_PATH} --source {latest_image} "
        f"--conf 0.25 --save-txt --save-conf --project /content/runs/detect --name latest --exist-ok"
    )
    os.system(detect_command)

    # Find the detected image
    detected_files = glob('/content/runs/detect/latest/*.jpg')

    if detected_files:
        detected_image = detected_files[0]  # Take the first detected file
        print(f"‚úÖ Detection completed: {detected_image}")

        # Ensure output directory exists
        os.makedirs(OUTPUT_DIR, exist_ok=True)

        # Generate a unique output path based on the original filename
        output_path = get_unique_output_path(OUTPUT_DIR, OUTPUT_BASE, latest_image)

        # Copy the detected image to Google Drive with a unique name
        shutil.copy(detected_image, output_path)
        print(f"üíæ Saved to: {output_path}")

        # Display the detected image in Colab
        try:
            display(Image(filename=output_path, width=800))
            print("üñºÔ∏è Image displayed successfully")
        except Exception as e:
            print(f"‚ùå Error displaying image: {e}")
    else:
        print("‚ùå Detection failed. Check YOLOv5 output for errors.")
        # Print YOLOv5 logs for debugging
        log_file = '/content/runs/detect/latest/detect_log.txt'
        with open(log_file, 'w') as f:
            os.system(f"python detect.py --weights {MODEL_PATH} --source {latest_image} --conf 0.25 > {f.name}")
        with open(log_file, 'r') as f:
            print(f"YOLOv5 Log:\n{f.read()}")

# Run the function to process the latest image
process_latest_image_with_yolov5()

!pip install twilio

from twilio.rest import Client

# üîê Twilio credentials (Get these from your Twilio Console)
TWILIO_ACCOUNT_SID = 'ACb48406efc2cc2a9092050e344d1704a8'
TWILIO_AUTH_TOKEN = '8313c9f02ac38bd4e375454ec03b00d8'
TWILIO_PHONE_NUMBER = '+14752906438'  # Twilio phone number
YOUR_PHONE_NUMBER = '+919042400695'  # Your phone number

# Initialize Twilio client
twilio_client = Client(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN)

def send_sms_alert(message):
    sms = twilio_client.messages.create(
        body=message,
        from_=TWILIO_PHONE_NUMBER,
        to=YOUR_PHONE_NUMBER
    )
    print(f"üì≤ SMS sent! SID: {sms.sid}")


-----------
# Ensure latest_image is assigned before use
latest_image = get_latest_image(FOLDER_PATH)

if latest_image:
    # ‚úÖ Check if "blockage" was detected with confidence > 70%
    label_file = f"/content/runs/detect/latest/labels/{os.path.basename(latest_image).replace('.jpg', '.txt')}"

    if os.path.exists(label_file):
        with open(label_file, 'r') as file:
            labels = file.readlines()

        blockage_detected = False
        for line in labels:
            parts = line.strip().split()
            if parts[0] == "0" and len(parts) >= 6:  # Class 0 = blockage
                confidence = float(parts[5])
                if confidence > 0.70:
                    blockage_detected = True
                    break

        if not blockage_detected:
            print("üö® Blockage detected with confidence > 70%!")
            send_sms_alert("üö® ALERT: Blockage detected with confidence above 70% in drainage system.")
        else:
            print("‚úÖ No high-confidence blockage detected.")
    else:
        print("‚ö†Ô∏è No label file found. Possibly no objects were detected.")

